/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: GET_PP_DB {
        container = "ubuntu:jammy"
        publishDir = [
            path: { "${params.outdir}/${timestamp}/poppunk" },
            pattern: "*DUMMY_FILE",
            mode: 'copy'
        ]
    }
    withName: ASSIGN_PP_CLUSTER {
        container = 'staphb/poppunk:2.6.0'
        ext.args = '--update-db --run-qc --max-zero-dist 1 --max-merge 0 --max-a-dist 0.6'
        publishDir = [
            [
                path: { "${params.outdir}/${timestamp}/poppunk" },
                pattern: "*pp_results.csv",
                saveAs: { "${timestamp}-${taxa_name}-pp_results.csv" },
                mode: 'copy'
            ],
            [
                path: { "${params.outdir}/${timestamp}/poppunk" },
                pattern: "*cluster_status.csv",
                saveAs: { "${timestamp}-${taxa_name}-cluster_status.csv" },
                mode: 'copy'
            ],
            [
                path: { "${params.outdir}/${timestamp}/poppunk" },
                pattern: "*CACHE",
                saveAs: { "${timestamp}-${taxa_name}-new_cache.txt" },
                mode: 'copy'
            ]
        ]
    }
    withName: PREPARE_REFERENCE {
        container = "ubuntu:jammy"
        publishDir = [
            path: { "${params.outdir}/${timestamp}/" },
            pattern: "ref/*.fa",
            mode: 'copy'
        ]
    }
    withName: FETCH_EXISTING_DB {
        container = "ubuntu:jammy"
        publishDir = [
            path: { "${params.outdir}/${timestamp}/poppunk" },
            pattern: "*DUMMY_FILE",
            mode: 'copy'
        ]
    }
    withName: SNIPPY_SINGLE {
        container = 'staphb/snippy:4.6.0-SC2'
        ext.args = '--cpus 8'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/variants/per_sample" },
            pattern: "*.tar.gz",
            saveAs: { "${timestamp}-${taxa}-${sample}.tar.gz" },
            mode: 'copy'
        ]
    }
    withName: SNIPPY_CORE {
        container = 'staphb/snippy:4.6.0-SC2'
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/${timestamp}/variants/" },
            pattern: "core/*",
            mode: 'copy'
        ]
    }
    withName: SNP_DISTS {
        container = 'staphb/snp-dists:0.8.2'
        ext.args = '-b'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/variants/core" },
            pattern: "*.dist",
            mode: 'copy'
        ]
    }
    withName: IQTREE {
        container = 'staphb/iqtree2:2.2.2.6'
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/${timestamp}/trees" },
            pattern: "*.treefile",
            mode: 'copy'
        ]
    }
    withName: GET_MASH_SKETCH_CLUSTER {
        container = "ubuntu:jammy"
        publishDir = [
            path: { "${params.outdir}/${timestamp}/mash/" },
            pattern: "*CACHE",
            saveAs: { "${timestamp}-${taxa_name}-${cluster_name}-mash_cache.txt" },
            mode: 'copy'
        ]
    }
    withName: GET_MASH_SKETCH_ALL {
        container = "ubuntu:jammy"
        publishDir = [
            path: { "${params.outdir}/${timestamp}/mash/" },
            pattern: "*CACHE",
            saveAs: { "${timestamp}-${taxa_name}-mash_cache.txt" },
            mode: 'copy'
        ]
    }
    withName: MASH_DIST_CLUSTER_NEW {
        container = 'staphb/mash:2.3'
        publishDir = [
            [
                path: { "${params.outdir}/${timestamp}/mash" },
                pattern: "*.msh",
                saveAs: { "${timestamp}-${taxa_name}-${cluster_name}-mash-sketch.msh" },
                mode: 'copy'
            ],
            [
                path: { "${params.outdir}/${timestamp}/mash" },
                pattern: "*mash-ava-cluster.tsv",
                saveAs: { "${timestamp}-${taxa_name}-${cluster_name}-mash-ava.tsv" },
                mode: 'copy'
            ],
        ]
    }
    withName: MASH_DIST_CLUSTER_OLD {
        container = 'staphb/mash:2.3'
        publishDir = [
            [
                path: { "${params.outdir}/${timestamp}/mash" },
                pattern: "!{timestamp}.msh",
                saveAs: { "${timestamp}-${taxa_name}-${cluster}-mash-sketch.msh" },
                mode: 'copy'
            ],
            [
                path: { "${params.outdir}/${timestamp}/mash" },
                pattern: "*mash-ava-cluster.tsv",
                saveAs: { "${timestamp}-${taxa_name}-${cluster_name}-mash-ava.tsv" },
                mode: 'copy'
            ],

        ]
    }
    withName: MASH_DIST_ALL {
        container = 'staphb/mash:2.3'
        publishDir = [
            [
                path: { "${params.outdir}/${timestamp}/mash" },
                pattern: "!{timestamp}.msh",
                saveAs: { "${timestamp}-${taxa_name}-mash-sketch.msh" },
                mode: 'copy'
            ],
            [
                path: { "${params.outdir}/${timestamp}/mash" },
                pattern: "*mash-ava-all.tsv",
                saveAs: { "${timestamp}-${taxa_name}-mash-ava.tsv" },
                mode: 'copy'
            ],
        ]
    }
    withName: MASH_TREE_CLUSTER {
        container = 'johnjare/spree:1.0'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/trees/" },
            pattern: "*.treefile",
            saveAs: { "${timestamp}-${taxa_name}-${cluster_name}-mash.treefile" },
            mode: 'copy'
        ]
    }
    withName: MASH_TREE_ALL {
        container = 'johnjare/spree:1.0'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/trees/" },
            pattern: "*.treefile",
            saveAs: { "${timestamp}-${taxa_name}-mash.treefile" },
            mode: 'copy'
        ]
    }
    withName: TREE_FIGURE_CLUSTER {
        container = 'johnjare/spree:1.0'
        publishDir = [
            [
                path: { "${params.outdir}/${timestamp}/trees" },
                pattern: { "*.jpg" },
                mode: 'copy'
            ],
            [
                path: { "${params.outdir}/${timestamp}/trees" },
                pattern: "*.jpg",
                saveAs: { "${timestamp}-${taxa_name}-${cluster_name}-mash.treefile.jpg" },
                mode: 'copy'
            ],
        ]
    }
    withName: TREE_FIGURE_ALL {
        container = 'johnjare/spree:1.0'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/trees/" },
            pattern: "*.jpg",
            saveAs: { "${timestamp}-${taxa_name}-mash.treefile.jpg" },
            mode: 'copy'
        ]
    }
    withName: SUMMARY_TABLE {
        container = 'johnjare/spree:1.0'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/summary" },
            pattern: "*-summary.tsv",
            mode: 'copy'
        ]
    }
    withName: PUSH_CLUSTER_FILES {
        container = "ubuntu:jammy"
        publishDir = [
            [
                path: { "${params.db}/${taxa}/clusters/${cluster}/snippy/" },
                pattern: "*.tar.gz",
                mode: 'copy'
            ],
            [
                path: { "${params.db}/${taxa}/clusters/${cluster}/mash/" },
                pattern: "*.msh",
                mode: 'copy'
            ],
            [
                path: { "${params.db}/${taxa}/clusters/${cluster}/mash/" },
                pattern: "CACHE",
                mode: 'copy'
            ],
            [
                path: { "${params.db}/${taxa}/clusters/${cluster}/ref/" },
                pattern: "*.fa",
                mode: 'copy',
                overwrite: false
            ],
        ]
    }
    withName: PUSH_TAXA_FILES {
        container = "ubuntu:jammy"
        publishDir = [
            [
                path: { "${params.db}/${taxa}/pp_db/" },
                pattern: '*.tar.gz',
                mode: 'copy'
            ],
            [
                path: { "${params.db}/${taxa}/pp_db/" },
                pattern: "*CACHE",
                mode: 'copy'
            ],
            [
                path: { "${params.db}/${taxa}/mash/" },
                pattern: "*.msh",
                mode: 'copy'
            ],
            [
                path: { "${params.db}/${taxa}/mash/" },
                pattern: "*CACHE",
                mode: 'copy'
            ],
        ]
    }
    withName:
     CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
