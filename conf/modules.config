/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: ASSIGN_PP_CLUSTER {
        container = 'docker.io/staphb/poppunk:2.6.0'
        ext.args = '--update-db --run-qc --max-zero-dist 1 --max-merge 0 --max-a-dist 0.6'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/${taxa}/poppunk" },
            pattern: "*pp_results.csv",
            saveAs: { "${timestamp}-${taxa}-pp_results.csv" },
            mode: 'copy'
        ]
    }
    withName: POPPUNK_VISUAL {
        container = 'docker.io/staphb/poppunk:2.6.0'
        ext.args = '--microreact'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/${taxa}/poppunk" },
            pattern: "*-poppunk*",
            mode: 'copy'
        ]
    }
    withName: RESOLVE_MERGED_CLUSTERS {
        container = 'docker.io/staphb/mash:2.3'
        publishDir = [
            path: { "${params.outdir}" },
            pattern: "none",
            mode: 'copy'
        ]
    }
    withName: SNIPPY_SINGLE {
        container = 'docker.io/staphb/snippy:4.6.0-SC2'
        ext.args = '--cleanup'
        stageInMode = 'copy'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}/variants/per_sample" },
            pattern: "*.tar.gz",
            saveAs: { "${timestamp}-${taxa}-${sample}.tar.gz" },
            mode: 'copy'
        ]
    }
    withName: SNIPPY_CORE {
        container = 'docker.io/staphb/snippy:4.6.0-SC2'
        ext.args = ''
        stageInMode = 'copy'
        publishDir = [
            [
                path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}/variants/core" },
                pattern: "*.stats",
                mode: 'copy'
            ],
            [
                path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}/variants/core" },
                pattern: "*.aln",
                mode: 'copy'
            ]
        ]
    }
    withName: SNP_DISTS {
        container = 'docker.io/staphb/snp-dists:0.8.2'
        ext.args = '-b'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}/variants/core" },
            pattern: "*.dist",
            mode: 'copy'
        ]
    }
    withName: IQTREE {
        container = 'docker.io/staphb/iqtree2:2.2.2.6'
        ext.args = '-m GTR+I+G -B 1000'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}/variants/core" },
            pattern: "*.contree",
            saveAs: { "${prefix}-core-iqtree.nwk" },
            mode: 'copy'
        ]
    }
    withName: RAPIDNJ {
        ext.args = '-n -b 1000 -a jc'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}/variants/core" },
            pattern: "*.treefile",
            saveAs: { "${prefix}-core-rapidnj.nwk" },
            mode: 'copy'
        ]
    }
    withName: MASH_DIST {
        container = 'docker.io/staphb/mash:2.3'
        publishDir = [
            [
                path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}/mash" },
                pattern: "*.msh",
                saveAs: { "${timestamp}-${taxa}-${cluster}-mash-sketch.msh" },
                mode: 'copy'
            ],
            [
                path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}/mash" },
                pattern: "*mash-ava-cluster.tsv",
                saveAs: { "${timestamp}-${taxa}-${cluster}-mash-ava.tsv" },
                mode: 'copy'
            ],
        ]
    }
    withName: MASH_TREE {
        container = 'docker.io/johnjare/spree:1.0'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}/mash" },
            pattern: "*.treefile",
            saveAs: { "${timestamp}-${taxa}-${cluster}-mash.nwk" },
            mode: 'copy'
        ]
    }
    withName: CORE_TREE_FIGURE {
        container = 'docker.io/johnjare/spree:1.0'
        publishDir = [
            [
                path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}" },
                pattern: "*.jpg",
                mode: 'copy'
            ],
            [
                path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}/variants/core" },
                pattern: "*.nwk",
                mode: 'copy'
            ]
        ]
    }
    withName: MASH_TREE_FIGURE {
        container = 'docker.io/johnjare/spree:1.0'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}" },
            pattern: "*.jpg",
            mode: 'copy'
        ]
    }
    withName: DIST_MAT {
        container = 'docker.io/johnjare/spree:1.0'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}" },
            pattern: "*.jpg",
            mode: 'copy'
        ]
    }
    withName: SUMMARY_TABLE {
        container = 'docker.io/johnjare/spree:1.0'
        publishDir = [
            path: { "${params.outdir}/${timestamp}/${taxa}/${cluster}" },
            pattern: "*-summary.tsv",
            mode: 'copy'
        ]
    }
    withName: COMBINED_SUMMARY {
        container = 'docker.io/jdj0303/bigbacter-base:1.0.0'
        publishDir = [
            path: { "${params.outdir}/${timestamp}" },
            pattern: "*.tsv",
            mode: 'copy'
        ]
    }
    withName: PUSH_CLUSTER_FILES {
        container = "docker.io/jdj0303/bigbacter-base:1.0.0"
        stageInMode = 'copy'
        publishDir = [
            [
                path: { "${params.db}/${taxa}/clusters/${cluster}/snippy/" },
                pattern: "*.tar.gz",
                mode: 'copy'
            ],
            [
                path: { "${params.db}/${taxa}/clusters/${cluster}/mash/" },
                pattern: "*.msh",
                mode: 'copy'
            ],
            [
                path: { "${params.db}/${taxa}/clusters/${cluster}/ref/" },
                pattern: "ref.fa.gz",
                mode: 'copy',
                overwrite: false
            ],
        ]
    }
    withName: PUSH_TAXA_FILES {
        container = "docker.io/jdj0303/bigbacter-base:1.0.0"
        publishDir = [
            path: { "${params.db}/${taxa}/pp_db/" },
            pattern: '*.tar.gz',
            mode: 'copy',
            overwrite: false
        ]
    }
    withName: PREPARE_DB_MOD {
        container = "docker.io/jdj0303/bigbacter-base:1.0.0"
        stageInMode = 'copy'
        publishDir = [
            path: { "${params.db}/${taxa}/pp_db/" },
            pattern: '*.tar.gz',
            mode: 'copy'
        ]
    }
    withName:
     MULTIQC {
        publishDir = [
            path: { "${params.outdir}/${timestamp}" },
            mode: params.publish_dir_mode,
            pattern: '*multiqc_report.html'
        ]
    }
    withName:
     CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/${timestamp}/" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}
